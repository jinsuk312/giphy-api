{"version":3,"sources":["components/SearchBar.js","components/GifItem.js","components/GifList.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchBar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","setState","props","onTermChange","_this2","react_default","a","createElement","className","onChange","event","onInputChange","target","value","React","Component","GifItem","image","alt","gif","name","src","images","fixed_height","url","GifList","gifItems","gifs","map","components_GifItem","key","id","App","selectedGif","modalIsOpen","handleTermChange","bind","assertThisInitialized","concat","replace","request","get","err","res","body","data","_this3","components_SearchBar","components_GifList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQA4BeA,qBAvBX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAETC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CAACC,KAAM,IAJXR,6EAOCQ,GAEVL,KAAKM,SAAS,CAACD,SAEfL,KAAKO,MAAMC,aAAaH,oCAEpB,IAAAI,EAAAT,KACJ,OAEIU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,SAAOE,SAAU,SAAAC,GAAK,OAAIN,EAAKO,cAAcD,EAAME,OAAOC,kBAnBlDC,IAAMC,YCQfC,EARC,SAACC,GACb,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKW,IAAKD,EAAME,IAAIC,KAAMC,IAAKJ,EAAME,IAAIG,OAAOC,aAAaC,QCS1DC,EAZC,SAACvB,GAEb,IAAMwB,EAAWxB,EAAMyB,KAAKC,IAAI,SAACX,GAE7B,OAAOZ,EAAAC,EAAAC,cAACsB,EAAD,CAASC,IAAKb,EAAMc,GAAIZ,IAAKF,MAGxC,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAakB,qBCoCrBM,cAnCb,SAAAA,IAAa,IAAAxC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqC,IAEXxC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuC,GAAAlC,KAAAH,QAEKI,MAAO,CACV4B,KAAK,GACLM,YAAa,KACbC,aAAa,GAGf1C,EAAK2C,iBAAmB3C,EAAK2C,iBAAiBC,KAAtB3C,OAAA4C,EAAA,EAAA5C,QAAA4C,EAAA,EAAA5C,CAAAD,KAVbA,gFAcIQ,GAAM,IAAAI,EAAAT,KAEf6B,EAAG,yCAAAc,OAA4CtC,EAAKuC,QAAQ,MAAO,KAAhE,8DAETC,IAAQC,IAAIjB,EAAK,SAACkB,EAAIC,GACpBvC,EAAKH,SAAS,CAAC0B,KAAMgB,EAAIC,KAAKC,0CAGzB,IAAAC,EAAAnD,KACP,OAEEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,aACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,wCACAH,EAAAC,EAAAC,cAACwC,EAAD,CAAW5C,aAAc,SAAAH,GAAI,OAAI8C,EAAKX,iBAAiBnC,MACvDK,EAAAC,EAAAC,cAACyC,EAAD,CAASrB,KAAMhC,KAAKI,MAAM4B,eA/BhBZ,aCEEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ff19f54b.chunk.js","sourcesContent":["import React from 'react';\n\n//extending React.Component so that our class is inheriting whatever properties are inside of the constructor of the parent ReactComponent\nclass SearchBar extends React.Component {\n    // added a constructor method, runs autmatically when class is initialized\n    constructor(){\n        // called super method that lets us access this.state\n        super();\n        //initializing state, letting app know it needs to be aware of our search term\n        this.state = {term: ''}\n    }\n// this is fired every time the input is changed\n    onInputChange(term){\n        //using setState to signal to react that the state has changed(instead of this.state(term);)\n        this.setState({term});\n        //pass data from child component SearchBar to its parent (App)\n        this.props.onTermChange(term);\n    }\n    render(){\n        return(\n            // everything we update our input onChange automatically fires and that thats the term and runs onInputChange\n            <div className=\"search\">\n                <input onChange={event => this.onInputChange(event.target.value)} />\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;","import React from 'react';\n// stateless functional component, doesnt need to track on our application state.\n// takes the image object passed as props from the GifList and passes the URL into an image element.\nconst GifItem = (image) => {\n    return (\n        <div className=\"gif-item\">\n            <img alt={image.gif.name} src={image.gif.images.fixed_height.url} />\n        </div>\n    )\n};\n\nexport default GifItem;","import React from 'react';\nimport GifItem from './GifItem';\n// stateless funtional component, doesnt need to track on our applications state.\nconst GifList = (props) => {\n    // loop through the array of gifs passed down from state, for each gif we are rendering a GifItem component\n    const gifItems = props.gifs.map((image) => {\n        // setting unique key property on each GifItem\n        return <GifItem key={image.id} gif={image} />\n    });\n\n    return (\n        <div className=\"gift-list\">{gifItems}</div>\n    );\n};\n\nexport default GifList;","// importing React library and specifically the Component method from it\nimport React, { Component } from 'react';\n// CSS\nimport '../styles/App.css';\n// importing SearchBar,GiftLit class\nimport SearchBar from './SearchBar';\nimport GifList from './GifList';\n// importing request to handle HTTP request\nimport request from 'superagent';\n//extending React.Component so that our class is inheriting whatever properties are inside of the constructor of the parent ReactComponent\nclass App extends Component {\n  // added a constructor method\n  constructor(){\n    //called super method that lets us access this.state\n    super();\n    //initializing state, letting app know it needs to be aware to track data  \n    this.state= {\n      gifs:[],\n      selectedGif: null,\n      modalIsOpen: false\n    };\n    //tells app that the this of handleTermChange is bound to App, not onTermChange\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n \n  //API call thats receiving term from our SearchBar\n  handleTermChange(term) {\n    //adding term to the API call and replace method to swap all the spaces with '+'\n    const url = `http://api.giphy.com/v1/gifs/search?q=${term.replace(/\\s/g, '+')}&api_key=mpyBfV1wY3bkM6yzxJO0jtsLZhclW6SX&limit=20&lang=en`;\n    //get request with SuperAgent to the above URL\n    request.get(url, (err,res) => {\n      this.setState({gifs: res.body.data})\n    });\n  }\n  render() {\n    return (\n      //App is handling an array of gifs. SearchBar tracks the search term entered in the input, giflist handles where the data goes \n      <div className=\"App\">\n        <h1 className=\"app-title\">Giphy API</h1>\n        <h6 className=\"input-description\">Enter Search Query below for GIPHYS!</h6>\n        <SearchBar onTermChange={term => this.handleTermChange(term)} />\n        <GifList gifs={this.state.gifs} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}